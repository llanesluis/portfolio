---
import { ViewTransitions } from "astro:transitions";
import Footer from "../components/Footer.astro";
import Noise from "../components/global/Noise.astro";
import ScreenHelpers from "../components/helpers/ScreenHelpers.astro";

interface Props {
  title: string;
  description?: string;
}

const { title, description = "Luis Llanes' personal website" } = Astro.props;
---

<!doctype html>
<html lang="en" class="selection:bg-accent-light selection:text-accent-dark">
  <head>
    <title>{title}</title>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />
  </head>

  <body class="flex min-h-screen flex-col">
    <Noise />
    <div
      class="pointer-events-none absolute inset-x-0 -top-56 -z-50 mx-auto size-7/12 rounded-full bg-accent opacity-5 blur-3xl"
    >
    </div>

    <main class="grow">
      <slot />
    </main>

    <Footer />
    <ScreenHelpers />
  </body>
</html>

<style is:global>
  :root {
    color-scheme: light dark;

    --background: 0, 0%, 99%;
    --foreground: 0 0% 3.9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;

    --accent: 136, 58, 234;
    --accent-light: 224, 204, 250;
    --accent-dark: 49, 10, 101;
    --accent-gradient: linear-gradient(
      45deg,
      rgb(var(--accent)),
      rgb(var(--accent-light)) 30%,
      white 60%
    );

    &.dark {
      --background: 223, 16%, 9%;
      --foreground: 0 0% 95%;
      --muted: 0 0% 14.9%;
      --muted-foreground: 0 0% 63.9%;
    }
  }

  html {
    font-family: system-ui, sans-serif;
    scroll-behavior: smooth;
  }

  body {
    min-height: 100vh;
    overscroll-behavior: none;

    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
  }

  code {
    font-family:
      Menlo,
      Monaco,
      Lucida Console,
      Liberation Mono,
      DejaVu Sans Mono,
      Bitstream Vera Sans Mono,
      Courier New,
      monospace;
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    text-wrap: balance;
  }

  p,
  li,
  figcaption {
    text-wrap: pretty;
    max-width: 75ch;
  }

  header,
  footer,
  main,
  section,
  article {
    container-type: inline-size;
  }

  @media (prefers-reduced-motion: reduce) {
    html {
      scroll-behavior: auto;
    }
  }
</style>

<script>
  type Theme = "light" | "dark";
  // Si no tiene preferencia en el local storage hace fallback al tema del sistema
  const getThemePreference = (): Theme => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme") as Theme;
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const setTheme = (theme: Theme) => {
    document.documentElement.classList[theme === "dark" ? "add" : "remove"](
      "dark",
    );
    localStorage.setItem("theme", theme);
  };

  setTheme(getThemePreference());

  // Escuchar cambios en la preferencia de tema del sistema
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      const newTheme = e.matches ? "dark" : "light";
      setTheme(newTheme);
    });

  // Para mantener el estado debido a las <ViewTransitions/>
  document.addEventListener("astro:after-swap", () => {
    setTheme(getThemePreference());
  });
</script>
