---
import { ViewTransitions } from "astro:transitions";
import Footer from "../components/Footer.astro";
import Noise from "../components/global/Noise.astro";
import ScreenHelpers from "../components/helpers/ScreenHelpers.astro";
import ThemeControl from "../components/global/ThemeControl.astro";
import ScrollProgressBar from "../components/global/ScrollProgressBar.astro";
import BottomPageEffect from "../components/global/BottomPageEffect.astro";
import TopPageEffect from "../components/global/TopPageEffect.astro";

import "@fontsource-variable/onest";
import "@fontsource-variable/jetbrains-mono";

import "../styles/globals.css";

interface Props {
  title: string;
  description?: string;
}

const { title, description = "Luis Llanes' personal website" } = Astro.props;
---

<!doctype html>
<html lang="en" class="selection:bg-accent-light selection:text-accent-dark">
  <head>
    <title>{title}</title>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />
  </head>

  <body>
    <TopPageEffect />

    <div class="grid min-h-screen grid-rows-[1fr_auto]">
      <main>
        <slot />
      </main>
      <Footer />
    </div>

    <Noise />
    <ScrollProgressBar />
    <BottomPageEffect />
    <ThemeControl />
    <ScreenHelpers />
  </body>
</html>

<style>
  html {
    font-family: system-ui, sans-serif;
    scroll-behavior: smooth;
    scroll-padding: 110px;
  }
  body {
    position: relative;
    isolation: isolate;
    overscroll-behavior: none;
    overflow-x: hidden;

    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
  }
  main {
    position: relative;

    &::before {
      position: absolute;
      content: "";
      top: 0;
      width: 100%;
      height: 100vh;
      z-index: -90;

      background-color: hsl(var(--background));
      background-image: var(--gradient-background);
      background-repeat: no-repeat;
      overflow-x: hidden;
    }

    &::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      height: 100%;
      z-index: -100;
    }
  }
</style>

<script>
  type Theme = "light" | "dark";
  // Si no tiene preferencia en el local storage hace fallback al tema del sistema
  const getThemePreference = (): Theme => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme") as Theme;
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const setTheme = (theme: Theme) => {
    document.documentElement.classList[theme === "dark" ? "add" : "remove"](
      "dark",
    );
    localStorage.setItem("theme", theme);
  };

  setTheme(getThemePreference());

  // Escuchar cambios en la preferencia de tema del sistema
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      const newTheme = e.matches ? "dark" : "light";
      setTheme(newTheme);
    });

  // Para mantener el estado debido a las <ViewTransitions/>
  document.addEventListener("astro:after-swap", () => {
    setTheme(getThemePreference());
  });
</script>
