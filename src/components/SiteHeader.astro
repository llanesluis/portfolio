---
import ExternalLink from "./global/ExternalLink.astro";
import GlassContainer from "./global/GlassContainer.astro";
import AboutMe from "./icons/AboutMe.astro";
import Briefcase from "./icons/Briefcase.astro";
import Code from "./icons/Code.astro";
import GitHub from "./icons/GitHub.astro";
import LinkedIn from "./icons/LinkedIn.astro";
import Mail from "./icons/Mail.astro";
import Links from "./Links.astro";

const navItems = [
  // {
  //   title: "Experience",
  //   label: "experience",
  //   url: "/#experience",
  //   icon: "briefcase",
  // },
  {
    title: "Projects",
    label: "projects",
    url: "/#projects",
    icon: "code",
  },
  {
    title: "About me",
    label: "about-me",
    url: "/#about-me",
    icon: "about-me",
  },
  {
    title: "Contact",
    label: "contact-me",
    url: "/#contact-me",
    icon: "mail",
  },
];
---

<GlassContainer class="w-full rounded-full py-2 pl-2.5 pr-6">
  <header class="flex items-center justify-between font-onest font-semibold">
    <a
      href="/#hero"
      title="Home"
      class:list={[
        "rounded-full ring-accent transition",
        "focus:outline-none focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-accent/70",
        "active:scale-95",
      ]}
    >
      <div class="group size-10 overflow-hidden rounded-full bg-accent">
        <img
          src="/photo.jpg"
          alt="Luis Llanes"
          class:list={["rounded-full transition", "hover:scale-90"]}
        />
      </div>
    </a>

    <nav class="hidden gap-4 md:flex" id="nav">
      {
        navItems.map((link) => (
          <a
            class:list={[
              "relative px-2 py-2 transition",
              "hover:text-accent dark:hover:text-accent",
              "active:scale-95",
            ]}
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        ))
      }
    </nav>

    <!-- Todo: check if there's a better way to render icons -->
    <nav class="flex justify-between gap-3 sm:gap-12 md:hidden" id="nav">
      {
        navItems.map((link) => (
          <a
            class:list={[
              "relative block py-2 transition",
              "hover:text-accent dark:hover:text-accent",
              "active:scale-95",
            ]}
            aria-label={link.label}
            href={link.url}
          >
            {link.icon === "briefcase" && <Briefcase />}
            {link.icon === "code" && <Code />}
            {link.icon === "about-me" && <AboutMe />}
            {link.icon === "mail" && <Mail />}
          </a>
        ))
      }
    </nav>

    <div class="hidden md:flex">
      <Links />
    </div>

    <div class="flex gap-1 md:hidden">
      <ExternalLink
        href="https://www.linkedin.com/in/llanesluis/"
        class="font-semibold opacity-90 transition"
        icon><LinkedIn /></ExternalLink
      >
      <ExternalLink
        href="https://github.com/llanesluis"
        class="font-semibold opacity-90 transition"
        icon><GitHub /></ExternalLink
      >
    </div>
  </header>
</GlassContainer>

<script>
  document.addEventListener("astro:page-load", () => {
    // const experienceSection = document.querySelector("#experience");
    const projectsSection = document.querySelector("#projects");
    const aboutMeSection = document.querySelector("#about-me");
    const contactMeSection = document.querySelector("#contact-me");

    const sections = [
      // experienceSection,
      projectsSection,
      aboutMeSection,
      contactMeSection,
    ];

    const navItems = document.querySelectorAll("header #nav a");

    const callback = (entries: IntersectionObserverEntry[]) => {
      let mostVisibleEntry: any = null;
      let maxRatio = 0;

      entries.forEach((entry) => {
        if (entry.isIntersecting && entry.intersectionRatio > maxRatio) {
          mostVisibleEntry = entry;
          maxRatio = entry.intersectionRatio;
        }
      });

      if (mostVisibleEntry) {
        navItems.forEach((item) => {
          if (item.getAttribute("aria-label") === mostVisibleEntry.target.id) {
            item.classList.add("text-accent");
          } else {
            item.classList.remove("text-accent");
          }
        });
      }
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "-30% 0px -50% 0px",
      threshold: Array.from({ length: 101 }, (_, i) => i / 100), // Array con valores de 0 a 1 en incrementos de 0.01
    });

    sections.forEach((section) => {
      observer.observe(section!);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section!);
        });
      }
    };
  });
</script>
